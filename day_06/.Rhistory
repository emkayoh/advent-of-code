# Simulate movement
while (TRUE) {
steps <- steps + 1
step_to <- loc + move[[dir]]
# Check if Elvish has left the building
if (any(step_to <= 0) || any(step_to > imax)) {
message("Elvish has left the building")
trip <- TRUE
break
}
# Check if the path is blocked
if (maplet[step_to[1], step_to[2]] == "#") {
dir <- rotate_dir(dir)  # Change direction
} else {
# Move to the new location
loc <- step_to
path <- rbind(path, loc)
route <- c(route, dir)
maplet[step_to[1], step_to[2]] <- "o"
# Check for loop
vect <- path[, 1] + (path[, 2] - 1) * imax
index <- path[1, 1] + (path[1, 2] - 1) * imax
unique_places <- length(unique(vect))
places <- c(unique_places, places)
# Detect loop
if (index != 11655 && steps > 1000 && length(places) > 1 && places[1] == places[2]) {
loops <- loops + 1
message("It's a loop!")
break
}
}
}
}
combn(c(1,2),5)
seq(9)
seq(9)%%2
choose(5, 2)
choose(5, 10)
combn(letters[1:4], 2)
combn(letters[1:4], 20)
combn(letters[1:4], 4)
# Define the array
array <- c(1, 2)
# Use expand.grid to create all possible combinations (3 times)
combinations <- expand.grid(array, array, array)
# Convert the result to a matrix for a cleaner look (optional)
result <- as.matrix(combinations)
# Print the result
print(result)
expand.grid(rep( array, 3))
expand.grid(repeat(array, 3))
??trim
knitr::opts_chunk$set(echo = TRUE)
res = nums[1]
input <- read.delim('test.txt', sep = ':', header = FALSE)
colnames(input) <- c('calib', 'nums')
array <- c("+", "*")
# input
gen_comb <- function(array, times) {
input_list <- rep(list(array), times)
combinations <- do.call(expand.grid, input_list)
result <- as.matrix(combinations)
return(result)
}
calc_eq = function(nums, ops){
res = nums[1]
for (i in 1:length(ops)){
if (ops[i] == "+") (res = res + nums[i+1]) else (res =  res * nums[i+1])
}
return(res)
}
for(ii in 1){
cal <- input[ii, 1]
nums <- as.numeric(unlist(strsplit(trimws(input[ii,2]), ' ')))
times <- length(nums)
ops <- gen_comb(array, times)
for(jj in seq_len(nrow(ops))){
print(calc_eq(nums, ops))
}
}
ops
nums[1]
length(ops)
calc_eq(nums,ops)
input <- read.delim('test.txt', sep = ':', header = FALSE)
colnames(input) <- c('calib', 'nums')
array <- c(1, 0)
# input
gen_comb <- function(array, times) {
input_list <- rep(list(array), times)
combinations <- do.call(expand.grid, input_list)
result <- as.matrix(combinations)
return(result)
}
calc_eq = function(nums, ops){
res = nums[1]
for (i in 1:length(ops)){
if (ops[i]) (res = res + nums[i+1]) else (res =  res * nums[i+1])
}
return(res)
}
for(ii in 1){
cal <- input[ii, 1]
nums <- as.numeric(unlist(strsplit(trimws(input[ii,2]), ' ')))
times <- length(nums)
ops <- gen_comb(array, times)
}
calc_eq(nums,ops)
input <- read.delim('test.txt', sep = ':', header = FALSE)
colnames(input) <- c('calib', 'nums')
array <- c(1, 0)
# input
gen_comb <- function(array, times) {
input_list <- rep(list(array), times)
combinations <- do.call(expand.grid, input_list)
result <- as.matrix(combinations)
return(result)
}
calc_eq = function(nums, ops){
res = nums[1]
for (i in 1:length(ops)){
if (ops[i]) (res = res + nums[i+1]) else (res =  res * nums[i+1])
}
return(res)
}
for(ii in 1){
cal <- input[ii, 1]
nums <- as.numeric(unlist(strsplit(trimws(input[ii,2]), ' ')))
times <- length(nums)
perm <- gen_comb(array, times)
}
calc_eq(nums,perm[1])
perm[
1]
perm
perm[1,]
input <- read.delim('test.txt', sep = ':', header = FALSE)
colnames(input) <- c('calib', 'nums')
array <- c("+", "*")
# input
gen_comb <- function(array, times) {
input_list <- rep(list(array), times)
combinations <- do.call(expand.grid, input_list)
result <- as.matrix(combinations)
return(result)
}
calc_eq = function(nums, ops){
res = nums[1]
for (i in 1:length(ops)){
if (ops[i] == "+") (res = res + nums[i+1]) else (res =  res * nums[i+1])
}
return(res)
}
cal <- input[ii, 1]
nums <- as.numeric(unlist(strsplit(trimws(input[ii,2]), ' ')))
times <- length(nums)
perm <- gen_comb(array, times)
perm
calc_eq(nums, perm[1,])
nums[1]
res = nums[1]
length(perm[1,])
perm
ops <- perm[1,]
ii
ops[i] == "+"
ops[ii] == "+"
i = 1
ops[i] == "+"
if (ops[i] == "+") (res = res + nums[i+1])
if (ops[i] == "+") (res = res + nums[i+1]) else (res =  res * nums[i+1])
calc_eq = function(nums, ops){
res = nums[1]
for (i in 1:length(ops)){
if (ops[i] == "+") (res = res + nums[i+1]) else (res =  res * nums[i+1])
}
return(res)
}
calc_eq(nums, perm[1,])
perm[1,]
perm[1,]
nums
input <- read.delim('test.txt', sep = ':', header = FALSE)
colnames(input) <- c('calib', 'nums')
array <- c("+", "*")
# input
gen_comb <- function(array, times) {
input_list <- rep(list(array), times)
combinations <- do.call(expand.grid, input_list)
result <- as.matrix(combinations)
return(result)
}
calc_eq = function(nums, ops){
res = nums[1]
for (i in 1:length(ops)){
if (ops[i] == "+") (res = res + nums[i+1]) else (res =  res * nums[i+1])
}
return(res)
}
calibration = function(numbers, value){
n = length(numbers)-1
perm = get_perm(n)
for (i in 1:nrow(perm)){
res = calc_eq(numbers, perm[i,])
# print(res)
if (res == value) return(TRUE)
if (i == nrow(perm)) return(FALSE)
}
}
for(ii in 1:1){
value <- input[ii,1]
}
input <- read.delim('test.txt', sep = ':', header = FALSE)
colnames(input) <- c('calib', 'nums')
array <- c("+", "*")
# input
gen_comb <- function(array, times) {
input_list <- rep(list(array), times)
combinations <- do.call(expand.grid, input_list)
result <- as.matrix(combinations)
return(result)
}
calc_eq = function(nums, ops){
res = nums[1]
for (i in 1:length(ops)){
if (ops[i] == "+") (res = res + nums[i+1]) else (res =  res * nums[i+1])
}
return(res)
}
calibration = function(numbers, value){
n = length(numbers)-1
perm = get_perm(n)
for (i in 1:nrow(perm)){
res = calc_eq(numbers, perm[i,])
# print(res)
if (res == value) return(TRUE)
if (i == nrow(perm)) return(FALSE)
}
}
for(ii in 1:1){
value <- input[ii,1]
nums <- input[ii,1]
}
input <- read.delim('test.txt', sep = ':', header = FALSE)
colnames(input) <- c('calib', 'nums')
array <- c("+", "*")
# input
gen_comb <- function(array, times) {
input_list <- rep(list(array), times)
combinations <- do.call(expand.grid, input_list)
result <- as.matrix(combinations)
return(result)
}
calc_eq = function(nums, ops){
res = nums[1]
for (i in 1:length(ops)){
if (ops[i] == "+") (res = res + nums[i+1]) else (res =  res * nums[i+1])
}
return(res)
}
calibration = function(numbers, value){
n = length(numbers)-1
perm = get_perm(n)
for (i in 1:nrow(perm)){
res = calc_eq(numbers, perm[i,])
# print(res)
if (res == value) return(TRUE)
if (i == nrow(perm)) return(FALSE)
}
}
for(ii in 1:1){
value <- input[ii,1]
nums <- input[ii,2]
}
input <- read.delim('test.txt', sep = ':', header = FALSE)
colnames(input) <- c('calib', 'nums')
array <- c("+", "*")
# input
gen_comb <- function(array, times) {
input_list <- rep(list(array), times)
combinations <- do.call(expand.grid, input_list)
result <- as.matrix(combinations)
return(result)
}
calc_eq = function(nums, ops){
res = nums[1]
for (i in 1:length(ops)){
if (ops[i] == "+") (res = res + nums[i+1]) else (res =  res * nums[i+1])
}
return(res)
}
calibration = function(numbers, value){
n = length(numbers)-1
perm = get_perm(n)
for (i in 1:nrow(perm)){
res = calc_eq(numbers, perm[i,])
# print(res)
if (res == value) return(TRUE)
if (i == nrow(perm)) return(FALSE)
}
}
for(ii in 1:1){
value <- input[ii,1]
nums <- trimws(input[ii,2])
}
length(input)
input <- read.delim('test.txt', sep = ':', header = FALSE)
colnames(input) <- c('calib', 'nums')
array <- c("+", "*")
# input
gen_comb <- function(array, times) {
input_list <- rep(list(array), times)
combinations <- do.call(expand.grid, input_list)
result <- as.matrix(combinations)
return(result)
}
calc_eq = function(nums, ops){
res = nums[1]
for (i in 1:length(ops)){
if (ops[i] == "+") (res = res + nums[i+1]) else (res =  res * nums[i+1])
}
return(res)
}
calibration = function(numbers, value){
n = length(numbers)-1
perm = gen_comb(array,n)
for (i in 1:nrow(perm)){
res = calc_eq(numbers, perm[i,])
# print(res)
if (res == value) return(TRUE)
if (i == nrow(perm)) return(FALSE)
}
}
out <- length(input)
for(ii in 1:1){
value <- input[ii,1]
nums <- as.numeric(unlist(strsplit(trimws(input[ii,2]),' ')))
fixed = calibration(nums, value)
}
fixed
out
input
length(nrow(input))
input
input[2,]
nrow(input)
knitr::opts_chunk$set(echo = TRUE)
options(scipen = 999)
input <- read.delim('test.txt', sep = ':', header = FALSE)
colnames(input) <- c('calib', 'nums')
array <- c("+", "*")
# input
gen_comb <- function(array, times) {
input_list <- rep(list(array), times)
combinations <- do.call(expand.grid, input_list)
result <- as.matrix(combinations)
return(result)
}
calc_eq = function(nums, ops){
res = nums[1]
for (i in 1:length(ops)){
if (ops[i] == "+") (res = res + nums[i+1]) else (res =  res * nums[i+1])
}
return(res)
}
calibration = function(numbers, value){
n = length(numbers)-1
perm = gen_comb(array,n)
for (i in 1:nrow(perm)){
res = calc_eq(numbers, perm[i,])
# print(res)
if (res == value) return(TRUE)
if (i == nrow(perm)) return(FALSE)
}
}
out <- numeric(nrow(input))
for(ii in 1:nrow(input)){
value <- input[ii,1]
nums <- as.numeric(unlist(strsplit(trimws(input[ii,2]),' ')))
fixed = calibration(nums, value)
out[ii] <- fixed
}
sum(input[,1]*out)
options(scipen = 999)
input <- read.delim('input.txt', sep = ':', header = FALSE)
colnames(input) <- c('calib', 'nums')
array <- c("+", "*", "|")
gen_comb <- function(array, times) {
input_list <- rep(list(array), times)
combinations <- do.call(expand.grid, input_list)
result <- as.matrix(combinations)
return(result)
}
calc_eq2 = function(nums, ops){
res = nums[1]
for (i in 1:length(ops)){
if (ops[i] == "+"){
res = res + nums[i+1]
} else if (ops[i] == "*"){
res =  res * nums[i+1]
} else {
res = as.numeric(paste0(res, nums[i+1]))
}
}
return(res)
}
calibration2 = function(numbers, value){
n = length(numbers)-1
perm = gen_comb(array, n)
for (i in 1:nrow(perm)){
res = calc_eq2(numbers, perm[i,])
if (res == value) return(TRUE)
if (i == nrow(perm)) return(FALSE)
if (res > value) next
}
}
out <- numeric(nrow(input))
ii
ii = 1
input[ii,1]
knitr::opts_chunk$set(echo = TRUE)
options(scipen = 999)
input <- read.delim('test.txt', sep = ':', header = FALSE)
colnames(input) <- c('calib', 'nums')
array <- c("+", "*")
# input
gen_comb <- function(array, times) {
input_list <- rep(list(array), times)
combinations <- do.call(expand.grid, input_list)
result <- as.matrix(combinations)
return(result)
}
calc_eq = function(nums, ops){
res = nums[1]
for (i in 1:length(ops)){
if (ops[i] == "+") (res = res + nums[i+1]) else (res =  res * nums[i+1])
}
return(res)
}
calibration = function(numbers, value){
n = length(numbers)-1
perm = gen_comb(array,n)
for (i in 1:nrow(perm)){
res = calc_eq(numbers, perm[i,])
# print(res)
if (res == value) return(TRUE)
if (i == nrow(perm)) return(FALSE)
}
}
out <- numeric(nrow(input))
for(ii in 1:nrow(input)){
value <- input[ii,1]
nums <- as.numeric(unlist(strsplit(trimws(input[ii,2]),' ')))
fixed = calibration(nums, value)
out[ii] <- fixed
}
sum(input[,1]*out)
options(scipen = 999)
input <- read.delim('test.txt', sep = ':', header = FALSE)
colnames(input) <- c('calib', 'nums')
array <- c("+", "*", "|")
gen_comb <- function(array, times) {
input_list <- rep(list(array), times)
combinations <- do.call(expand.grid, input_list)
result <- as.matrix(combinations)
return(result)
}
calc_eq2 = function(nums, ops){
res = nums[1]
for (i in 1:length(ops)){
if (ops[i] == "+"){
res = res + nums[i+1]
} else if (ops[i] == "*"){
res =  res * nums[i+1]
} else {
res = as.numeric(paste0(res, nums[i+1]))
}
}
return(res)
}
calibration2 = function(numbers, value){
n = length(numbers)-1
perm = gen_comb(array, n)
for (i in 1:nrow(perm)){
res = calc_eq2(numbers, perm[i,])
if (res == value) return(TRUE)
if (i == nrow(perm)) return(FALSE)
if (res > value) next
}
}
out <- numeric(nrow(input))
for(ii in 1:nrow(input)){
value <- input[ii,1]
nums <- as.numeric(unlist(strsplit(trimws(input[ii,2]),' ')))
fixed = calibration(nums, value)
out[ii] <- fixed
}
sum(input[,1]*out)
ii
value
nums
ii = 7
value <- input[ii,1]
nums <- as.numeric(unlist(strsplit(trimws(input[ii,2]),' ')))
gen_comb(array, nums-1)
gen_comb(array, length(nums)-1)
nums
perm <- gen_comb(array, length(nums)-1)
calc_eq2(nums, perm[1,])
calc_eq2(nums, perm[2,])
calc_eq2(nums, perm[3,])
calc_eq2(nums, perm[4,])
